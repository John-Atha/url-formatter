{"version":3,"sources":["MyNavbar.js","Format.js","Home.js","About.js","App.js","index.js"],"names":["MyNavbar","props","Navbar","bg","expand","variant","Brand","href","onClick","change","Toggle","Collapse","id","Nav","className","Link","Format","useState","text","setText","formatted","setFormatted","url_regex","RegExp","useEffect","parts","split","i","length","splice","includes","part","slice","join","map","value","index","match","rel","target","Home","placeholder","onChange","event","style","About","App","page","setPage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAiBeA,MAdf,SAAkBC,GACd,OACI,eAACC,EAAA,EAAD,CAAQC,GAAG,UAAUC,OAAO,KAAKC,QAAQ,OAAzC,UACI,cAACH,EAAA,EAAOI,MAAR,CAAeC,KAAK,IAAIC,QAAS,kBAAIP,EAAMQ,OAAO,SAAlD,2BACA,cAACP,EAAA,EAAOQ,OAAR,CAAe,gBAAc,qBAC7B,cAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,mBAApB,SACA,eAACC,EAAA,EAAD,CAAKC,UAAU,UAAf,UACI,cAACD,EAAA,EAAIE,KAAL,CAAUP,QAAS,kBAAIP,EAAMQ,OAAO,SAApC,kBACA,cAACI,EAAA,EAAIE,KAAL,CAAUP,QAAS,kBAAIP,EAAMQ,OAAO,UAApC,4BCwDDO,MA9Df,SAAgBf,GAEd,MAAwBgB,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEMC,EAAY,IAAIC,OADH,qFA6BnB,OA1BAC,qBAAU,WACRL,EAAQlB,EAAMiB,QACb,CAACjB,EAAMiB,OAEVM,qBAAU,WAGR,IAFA,IACIC,EADMP,EACIQ,MAAM,MACXC,EAAE,EAAGA,EAAEF,EAAMG,OAAQD,GAAG,EAC/BF,EAAMI,OAAOF,EAAG,EAAG,MAGrB,IADA,IAAIA,EAAE,EAEAA,IAAIF,EAAMG,QADH,CAIX,GAAe,OAAXH,EAAME,SACL,GAAIF,EAAME,GAAGG,SAAS,KAAM,CAC/B,IAAIC,EAAON,EAAME,GAAGD,MAAM,KAC1BD,EAAMI,OAAOF,EAAG,EAAGI,EAAK,IACxBN,EAAME,EAAE,GAAKI,EAAKC,MAAM,EAAGD,EAAKH,QAAQK,KAAK,KAE/CN,IAEFN,EAAaI,KACZ,CAACP,IAGF,qBAAKJ,UAAU,qBAAf,SACGM,EAAUc,KAAI,SAACC,EAAOC,GACrB,MAAY,OAARD,EACO,qBAAKrB,UAAU,SAAasB,GAEtB,MAARD,EACC,qBAAKrB,UAAU,SAAasB,GAE7BD,EAAME,MAAMf,GAEjB,mBAAGR,UAAU,OACXwB,IAAI,sBACJC,OAAO,SACPhC,KAAM4B,EAHR,SAKKA,GADEC,GAMA,qBAAKtB,UAAU,OAAf,SAAmCqB,GAARC,SCxB/BI,MA7Bf,WAEE,MAAwBvB,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEA,OACI,gCACE,sBAAKL,UAAU,eAAf,UACE,yCACA,qBAAKA,UAAU,UACf,0BACEA,UAAU,WACV2B,YAAY,oBACZN,MAAOjB,EACPwB,SAAU,SAACC,GAASxB,EAAQwB,EAAMJ,OAAOJ,aAI7C,sBAAKrB,UAAU,eAAf,UACE,oBAAI8B,MAAO,CAAC,UAAa,QAAzB,uBACA,qBAAK9B,UAAU,UAEf,cAAC,EAAD,CAAQI,KAAMA,WCCT2B,MAzBf,WACE,OACE,sBAAK/B,UAAU,kBAAf,UACE,sBAAKA,UAAU,8BAAf,UACG,eACD,mBAAGP,KAAK,mCAAmC+B,IAAI,sBAAsBC,OAAO,SAA5E,0BAIF,uBACA,mEACA,gHACA,uBACA,8KAIA,uBACA,wKCESO,MAjBf,WAEE,MAAwB7B,mBAAS,QAAjC,mBAAO8B,EAAP,KAAaC,EAAb,KAEA,OACE,sBAAKlC,UAAU,MAAf,UAEE,cAAC,EAAD,CAAUL,OAAQuC,IAET,SAAPD,GAAiB,cAAC,EAAD,IAEV,UAAPA,GAAkB,cAAC,EAAD,Q,MCX1BE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.245d9230.chunk.js","sourcesContent":["import React from 'react';\nimport { Nav, Navbar } from 'react-bootstrap';\n\nfunction MyNavbar(props) {\n    return (\n        <Navbar bg=\"primary\" expand=\"lg\" variant=\"dark\">\n            <Navbar.Brand  href='#' onClick={()=>props.change('home')}>Url-Formatter</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"me-auto\">\n                <Nav.Link onClick={()=>props.change('home')} >Home</Nav.Link>\n                <Nav.Link onClick={()=>props.change('about')} >About</Nav.Link>\n            </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    )\n}\nexport default MyNavbar;\n","/* regex expression from: https://stackoverflow.com/questions/3809401/what-is-a-good-regular-expression-to-match-a-url */\n\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\n\nfunction Format(props) {\n\n  const [text, setText] = useState(\"\");\n  const [formatted, setFormatted] = useState([]);\n  const expression = /[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)?/;\n  const url_regex = new RegExp(expression);\n  \n  useEffect(()=>{\n    setText(props.text);\n  }, [props.text])\n  \n  useEffect(() => {\n    const s = text;\n    let parts = s.split('\\n');\n    for (let i=1; i<parts.length; i+=2) {\n      parts.splice(i, 0, '\\n');\n    }\n    let i=0;\n    while (true) {\n      if (i===parts.length) {\n        break;\n      }\n      if (parts[i]==='\\n') {}\n      else if (parts[i].includes(' ')) {\n        let part = parts[i].split(' ');\n        parts.splice(i, 0, part[0]);\n        parts[i+1] = part.slice(1, part.length).join(' ');\n      }\n      i++;\n    }\n    setFormatted(parts);\n  }, [text])\n  \n  return (\n    <div className='flex-layout result'>\n      {formatted.map((value, index) => {\n        if (value==='\\n') { \n          return ( <div className='break' key={index} /> )\n        }\n        else if (value===' ') {\n          return( <div className='space' key={index} />  )\n        }\n        else if (value.match(url_regex)) {\n          return (\n            <a className='word'\n              rel='noopener noreferrer'\n              target='_blank'\n              href={value}\n              key={index}>\n                {value}\n            </a>\n          )\n        }\n        else {\n          return ( <div className='word' key={index}>{value}</div> )\n        }\n      })}\n    </div>\n  )\n\n}\n\nexport default Format;\n","/* regex expression from: https://stackoverflow.com/questions/3809401/what-is-a-good-regular-expression-to-match-a-url */\n\nimport './App.css';\nimport React, { useState } from 'react';\nimport Format from './Format';\n\nfunction Home() {\n\n  const [text, setText] = useState(\"\");\n\n  return (\n      <div>\n        <div className='my-container'>\n          <h3>Initial</h3>\n          <div className='break' />\n          <textarea\n            className='bordered'\n            placeholder='Your text here...'\n            value={text}\n            onChange={(event)=>{setText(event.target.value)}}\n          />\n        </div>\n        \n        <div className='my-container'>\n          <h3 style={{'marginTop': '40px'}}>Formatted</h3>\n          <div className='break' />\n\n          <Format text={text} />\n\n        </div>\n      </div>\n  )\n}\n\n\nexport default Home;\n","import './App.css';\nimport React from 'react';\n\nfunction About() {\n  return (\n    <div className='about-container'>\n      <div className='flex-layout with-whitespace'>\n        {'Hello, I am '}\n        <a href='https://www.github.com/John-Atha' rel='noopener noreferrer' target='_blank'>\n          John-Atha\n        </a>\n      </div>\n      <hr />\n      <div>This is a simple reactJs project</div>\n      <div>It uses a small javascript code snippet and some decoration with HTML and CSS</div>\n      <hr />\n      <div>\n          The aim is to turn the urls of a text to clickable hrefs, keeping the relative\n          positioning of all the words and other elements of the text.\n      </div>\n      <hr />\n      <div>\n            I have been looking for an easy way to format the text this way in some projects I have build, as it can seem very useful for UX.\n      </div>\n    </div>\n  )\n}\n\nexport default About;\n","import './App.css';\nimport React, { useState } from 'react';\nimport MyNavbar from './MyNavbar';\nimport Home from './Home';\nimport About from './About';\n\nfunction App() {\n\n  const [page, setPage] = useState('home');\n\n  return (\n    <div className=\"App\">\n\n      <MyNavbar change={setPage} />\n\n      { page==='home' && <Home /> }\n\n      { page==='about' && <About /> }\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}